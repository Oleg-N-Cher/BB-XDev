Ofront+
=======

is a tool that translates Oberon programs into semantically equivalent C programs. Full error analysis is performed on the Oberon input program and in case of no errors up to three files per module are generated as output.

Ofront+ does not invoke the C compiler or linkage editor. This may be done in separate shell scripts or make files and is inherently dependent on the C compiler and linkage editor being used.

Although normally not read by the user, the C code generated by Ofront+ is kept as readable as possible, nicely formatted, should not produce any C compiler error messages or warnings and is tuned for efficient execution. In fact, an Oberon program translated by Ofront+ can be expected to execute as fast and read as well as an equivalent hand-coded C program.

Ofront+ is based on Ofront by Josef Templ, but some of Component Pascal features were added (IN parameters, BITS(int) and ORD(set), arithmetic type BYTE, etc). It also contains extra extensions, such as array constants (implemented by Oleg Komlev).


Installation
============

Directory structure

/Bin       - Ofront+ for Windows x86 (x32)
/Bin64     - Ofront+ for Windows x64
/Docu      - Documentation
/Linux_arm - Ofront+ for Linux ARM
/Linux_x64 - Ofront+ for Linux x64
/Linux_x86 - Ofront+ for Linux x86 (x32)
/Examples  - Examples of Oberon programs
/Lib/Bin   - Scripts for building (lib)Ofront.a
/Lib/Mod   - Sources of libraries
/Lib/Sym   - Library symbol files
/Lib/Obj   - Library object files
/Lib/Obj64 - Library object files (x64)
/Lib/Sym   - Library symbol files
/Lib/Sym64 - Library symbol files (x64)
/Mod       - Sources of the translator and tools
/Obj       - Working directory for object files
/Obj64     - Working directory for object files (x64)
/Sym       - Ofront+ symbol files
/Sym64     - Ofront+ symbol files (x64)

To (re)build static library (lib)Ofront that is required for the translator and all examples, go to the corresponding directory /Lib/Bin (it may be /Linux_x64/Lib/Bin or other) and run build(.bat).

To (re)build the translator, go to the corresponding directory /Bin (again it may be /Linux_x64/Bin or other) and run build(.bat).

To (re)build examples, go to the corresponding directory /Examples/Bin (or /Linux_x64/Examples/Bin etc.) and run build(.bat).
You'll need to install additional packages (.dll for Windows).
Please read /Examples/ReadMe.txt for more information.


Ofront+ differences from Ofront/voc
===================================

  1. New experimental dialect Oberon-3 (based on Oberon-07, Component Pascal and other).

  2. Outputs module name and position on any runtime error, HALT or ASSERT.

  3. New SYSTEM types: CHAR8, UINT8, INT8, INT16, INT32, INT64, ADRINT, REAL32, REAL64.

  4. Allows arithmetic operations with type BYTE (Oberon-3 & Component Pascal).

  5. Allows unlimited length of constant strings (in Ofront/voc the maximum is 255).

  6. Allows SYSTEM.VAL(INTEGER, {80000000H..0FFFFFFFFH}) as a constant of 32-bit type (otherwise 64-bit).

  7. ASH and SYSTEM.LSH return INTEGER result for INTEGER argument, and LONGINT result for LONGINT argument. This allows shifting without using 64-bit type.

  8. Support "_" in identifiers.

  9. Ofront+ for Windows also works under Windows 9x. Ofront+ for Linux supports both 32 and 64 bits.

  10. Support UTF-8 encoded sources (with or without BOM) with EOL as 0DX (Oberon System), 0AX (UNIX/Linux) and 0DX+0AX (Windows).

  11. "Proper FOR" support in Oberon-3 (concept and implementation by Oleg Komlev).

  12. Constant arrays support in Oberon-3 (yet only in Ofront+ for BlackBox).

  13. BITS(), ORD(set), LEN(string$), str1 := str2$, IN procedure parameters (in Component Pascal).

  14. ORD(bool), ORD(set) support in Oberon-3.

  15. Arithmetic operations DIV0 and REM0 for integers, as in GPCP.

  16. SYSTEM flags: VAR [nil], ARRAY/RECORD [untagged], POINTER [untagged] as in BlackBox.

  17. Advanced features for defining bindings to foreign libraries, system flag [stdcall].

  18. It is possible to use modules written in Oberon, Oberon-2, Component Pascal and Oberon-3 together in one project.

  19. Tested with GCC/MinGW, Clang, Intel C++, SDCC and Borland Turbo C.


Get it!
=======

Here are two versions:

  1. Ofront+ for Windows & Linux command line.

  2. Ofront+ for BlackBox Component Builder (runs as a subsystem).

You can download it at https://github.com/Oleg-N-Cher/OfrontPlus


Ofront+ now is in active development and we provide free support of the project.

To discuss and ask questions, you can subscribe to the group:

  https://groups.yahoo.com/neo/groups/ofront/info

or join the forum:

  http://zx.oberon2.ru/forum/

Your comments and suggestions are welcome.


The Ofront+ team,
2013-2019
