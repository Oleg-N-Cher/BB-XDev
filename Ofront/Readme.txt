Ofront+
=======

is a tool that translates Oberon-2 programs into semantically equivalent C programs. Full error analysis is performed on the Oberon input program and in case of no errors up to three files are generated as output.

Ofront+ does not invoke the C compiler or linkage editor. This may be done in separate shell scripts or make files and is inherently dependent on the C compiler and linkage editor being used.

Although normally not read by the user, the C code generated by Ofront+ is kept as readable as possible, nicely formatted, should not produce any C compiler error messages or warnings and is tuned for efficient execution. In fact, an Oberon program translated by Ofront+ can be expected to execute as fast and read as well as an equivalent hand-coded C program.

Ofront+ is based on Ofront by Josef Templ, but some of Component Pascal features was added (IN parameters, BITS(int) & ORD(set), arithmetic type BYTE, etc). It also contains the extra extensions, such as constant arrays (implemented by Oleg Komlev).


Ofront+ differences from Ofront/voc
===================================

  1. Advanced features for describing bindings to foreign libraries, system flag [stdcall].

  2. Outputs a module name and position for any runtime error, HALT and ASSERT.

  3. Allows arithmetic operations with the type BYTE.

  4. Allows unlimited length of constant strings (in Ofront/voc the maximum is 255 characters).

  5. Allows SYSTEM.VAL(INTEGER, {80000000H..0FFFFFFFFH}) as a constant of INTEGER type (otherwise LONGINT).

  6. ASH and SYSTEM.LSH return the INTEGER type result for INTEGER type argument, and LONGINT type result for LONGINT argument. It allows to use shift without using 64-bit type.

  7. Support "_" in identifiers.

  8. Ofront+ for Windows works under Windows 9x. Ofront+ for Linux supports both 32 and 64 bits.

  9. Support UTF-8 encoded sources (with or without BOM) with EOL as 0DX (Oberon System), 0AX (UNIX/Linux) & 0DX+0AX (Windows).

  10. "Right FOR" (concept by Oleg Komlev), constant arrays (only in Ofront+ for BlackBox).

  11. BITS() function, IN procedure parameters (as in Component Pascal).

  12. SYSTEM flags: VAR [nil], ARRAY/RECORD [untagged], POINTER [untagged] as in BlackBox.

  13. Tested with GCC/MinGW, Intel C++, SDCC and even Borland Turbo C.


Get it!
=======

Here are two versions:

  1. Ofront+ for Windows & Linux command line

  2. Ofront+ for BlackBox Component Builder (runs as a subsystem)

You can download it at https://github.com/Oleg-N-Cher/OfrontPlus


Ofront+ now is in active development and we provide free support of the project.

To discuss and ask questions, you can subscribe to the group:

  https://groups.yahoo.com/neo/groups/ofront/info

or join the forum:

  http://zx.oberon2.ru/forum/

Your comments and suggestions are welcome.


Ofront+ team,
2014-2018
