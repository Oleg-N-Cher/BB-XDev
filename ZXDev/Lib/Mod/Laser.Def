MODULE Laser; (** non-portable *)
(*-----------------------------------*)
(* LASER BASIC v3.17 for Ofront/SDCC *)
(* Adapted to Ofront by Oleg N. Cher *)
(*  VEDAsoft Oberon Club, 2012-2015  *)
(* Thanx to Raydac & Michailov (HVG) *)
(*-----------------------------------*)

TYPE
  BYTE = INTEGER;
  CARDINAL = LONGINT;

PROCEDURE InitSprites* (sprAddr, sprSize: CARDINAL); END InitSprites;
PROCEDURE InitSpritesEx* (sprAddr, sprSize: CARDINAL); END InitSpritesEx;
PROCEDURE InitScroll* (scrollBuf: CARDINAL); END InitScroll;
PROCEDURE CalcSpritesOffset* ; END CalcSpritesOffset;

(* Procedures for screen windows processing *)
PROCEDURE INVV* (col, row, len, hgt: BYTE); END INVV;
PROCEDURE MIRV* (col, row, len, hgt: BYTE); END MIRV;
PROCEDURE MARV* (col, row, len, hgt: BYTE); END MARV;
PROCEDURE SETV* (col, row, len, hgt: BYTE); END SETV;
PROCEDURE CLSV* (col, row, len, hgt: BYTE); END CLSV;
PROCEDURE WL1V* (col, row, len, hgt: BYTE); END WL1V;
PROCEDURE WR1V* (col, row, len, hgt: BYTE); END WR1V;
PROCEDURE WL4V* (col, row, len, hgt: BYTE); END WL4V;
PROCEDURE WR4V* (col, row, len, hgt: BYTE); END WR4V;
PROCEDURE WL8V* (col, row, len, hgt: BYTE); END WL8V;
PROCEDURE WR8V* (col, row, len, hgt: BYTE); END WR8V;
PROCEDURE SL1V* (col, row, len, hgt: BYTE); END SL1V;
PROCEDURE SR1V* (col, row, len, hgt: BYTE); END SR1V;
PROCEDURE SL4V* (col, row, len, hgt: BYTE); END SL4V;
PROCEDURE SR4V* (col, row, len, hgt: BYTE); END SR4V;
PROCEDURE SL8V* (col, row, len, hgt: BYTE); END SL8V;
PROCEDURE SR8V* (col, row, len, hgt: BYTE); END SR8V;
PROCEDURE WCRV* (col, row, len, hgt, npx: BYTE); END WCRV;
PROCEDURE SCRV* (col, row, len, hgt, npx: BYTE); END SCRV;
PROCEDURE AWLV* (col, row, len, hgt: BYTE); END AWLV;
PROCEDURE ASLV* (col, row, len, hgt: BYTE); END ASLV;
PROCEDURE AWRV* (col, row, len, hgt: BYTE); END AWRV;
PROCEDURE ASRV* (col, row, len, hgt: BYTE); END ASRV;
PROCEDURE ATUV* (col, row, len, hgt: BYTE); END ATUV;
PROCEDURE ATDV* (col, row, len, hgt: BYTE); END ATDV;

(* Procedures for sprites manipulations *)
PROCEDURE CLSM* (spN: BYTE); END CLSM;
PROCEDURE INVM* (spN: BYTE); END INVM;
PROCEDURE PTBL* (col, row, spN: BYTE); END PTBL;
PROCEDURE PTOR* (col, row, spN: BYTE); END PTOR;
PROCEDURE PTXR* (col, row, spN: BYTE); END PTXR;
PROCEDURE PTND* (col, row, spN: BYTE); END PTND;
PROCEDURE WL1M* (spN: BYTE); END WL1M;
PROCEDURE WR1M* (spN: BYTE); END WR1M;
PROCEDURE WL4M* (spN: BYTE); END WL4M;
PROCEDURE WR4M* (spN: BYTE); END WR4M;
PROCEDURE WL8M* (spN: BYTE); END WL8M;
PROCEDURE WR8M* (spN: BYTE); END WR8M;
PROCEDURE SL1M* (spN: BYTE); END SL1M;
PROCEDURE SR1M* (spN: BYTE); END SR1M;
PROCEDURE SL4M* (spN: BYTE); END SL4M;
PROCEDURE SR4M* (spN: BYTE); END SR4M;
PROCEDURE SL8M* (spN: BYTE); END SL8M;
PROCEDURE SR8M* (spN: BYTE); END SR8M;
PROCEDURE WCRM* (spN, npx: BYTE); END WCRM;
PROCEDURE SCRM* (spN, npx: BYTE); END SCRM;
PROCEDURE ATOF* ; END ATOF;
PROCEDURE ATON* ; END ATON;
PROCEDURE GTBL* (col, row, spN: BYTE); END GTBL;
PROCEDURE GTOR* (col, row, spN: BYTE); END GTOR;
PROCEDURE GTXR* (col, row, spN: BYTE); END GTXR;
PROCEDURE GTND* (col, row, spN: BYTE); END GTND;
PROCEDURE PMBL* (col, row, spD, spS: BYTE); END PMBL;
PROCEDURE PMOR* (col, row, spD, spS: BYTE); END PMOR;
PROCEDURE PMXR* (col, row, spD, spS: BYTE); END PMXR;
PROCEDURE PMND* (col, row, spD, spS: BYTE); END PMND;
PROCEDURE PMAT* (col, row, spD, spS: BYTE); END PMAT;
PROCEDURE GMBL* (col, row, spD, spS: BYTE); END GMBL;
PROCEDURE GMOR* (col, row, spD, spS: BYTE); END GMOR;
PROCEDURE GMXR* (col, row, spD, spS: BYTE); END GMXR;
PROCEDURE GMND* (col, row, spD, spS: BYTE); END GMND;
PROCEDURE GMAT* (col, row, spD, spS: BYTE); END GMAT;
PROCEDURE PWBL* (col, row, spN, spCol, spRow, len, hgt: BYTE);
  END PWBL;
PROCEDURE PWOR* (col, row, spN, spCol, spRow, len, hgt: BYTE);
  END PWOR;
PROCEDURE PWXR* (col, row, spN, spCol, spRow, len, hgt: BYTE);
  END PWXR;
PROCEDURE PWND* (col, row, spN, spCol, spRow, len, hgt: BYTE);
  END PWND;

END Laser.